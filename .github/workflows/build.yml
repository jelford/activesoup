name: build
on: [push]
jobs:
  build:
    strategy:
      matrix:
        pythonversion: ["3.10", "3.11.0b3"]
    runs-on: "ubuntu-latest"
    name: Package lint and build
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.pythonversion }}
    - uses: actions/cache@v2
      name: Pip Cache
      with:
        path: ~/.cache/pip
        key: "${{ runner.os }}-build-pip-${{ matrix.pythonversion }}-${{ hashFiles('pyproject.toml') }}-${{ hashFiles('ci/ci-requirements.txt') }}"
    - name: Python Poetry Action
      uses: abatilo/actions-poetry@v2.1.3
    - uses: actions/cache@v2
      name: Poetry Cache
      with:
        path: ~/.cache/pypoetry
        key: "${{ runner.os }}-build-poetry-${{ matrix.pythonversion }}-${{ hashFiles('poetry.lock') }}"
    - run: poetry install
      name: Install Dependencies (poetry)
    - run: poetry run black --check src tests
      name: Formatting (black)
    - run: poetry run mypy src
      name: Type Checking (mypy)
    - run: poetry build
      name: Package (wheel / sdist)
    - name: Upload built packages
      uses: actions/upload-artifact@v2
      with:
        name: dist-artefacts
        path: dist/

  test:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.6.2", "3.7", "3.8", "3.9", "3.10", "3.11.0b3"]
        pkg-type: ["whl", "tar.gz"]
    name: "Test (Python: ${{ matrix.python-version }}, Dist: ${{ matrix.pkg-type}})"
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - uses: actions/cache@v2
      name: Pip Cache
      with:
        path: ~/.cache/pip
        key: "${{ runner.os }}-build-pip-${{ matrix.pythonversion }}-${{ hashFiles('pyproject.toml') }}-${{ hashFiles('ci/ci-requirements.txt') }}"
    - name: Python Poetry Action
      uses: abatilo/actions-poetry@v2.1.3
    - uses: actions/cache@v2
      name: Poetry Cache
      with:
        path: ~/.cache/pypoetry
        key: "${{ runner.os }}-build-poetry-${{ matrix.pythonversion }}-${{ hashFiles('poetry.lock') }}"
    - run: poetry install --no-root
      name: Install dependencies (poetry)
    - run: poetry run pip install dist/activesoup-*.${{ matrix.pkg-type }}
      name: Install library (pip)
    - run: poetry run pytest
      name: Test (pytest)

  publish:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/cache@v2
        name: "Deployment pip cache"
        with:
          path: ~/.cache/pip
          key: "${{ runner.os }}-build-pip-deploy"

      - uses: actions/download-artifact@v2
        name: Fetch built packages
        with:
          name: dist-artefacts
          path: dist/
      - uses: pypa/gh-action-pypi-publish@master
        name: Publish package
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
